########## Create resource group and Log Analytics Workspace
##########

# Create resource group
#
resource "azurerm_resource_group" "rgwork" {

  name     = "rgamlhub${var.location_code}${var.random_string}"
  location = var.location

  tags = var.tags
}

# Create a Log Analytics Workspace that all resources specific to this workload will
# write configured resource logs and metrics to
#
resource "azurerm_log_analytics_workspace" "log_analytics_workspace" {
  name                = "law${var.purpose}${var.location_code}${var.random_string}"
  location            = var.location
  resource_group_name = azurerm_resource_group.rgwork.name

  sku               = "PerGB2018"
  retention_in_days = 30

  tags = var.tags

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

# (OPTIONAL) Configure diagnostic settings for Log Analytics Workspace
#
resource "azurerm_monitor_diagnostic_setting" "diag_base" {
  depends_on = [azurerm_log_analytics_workspace.log_analytics_workspace]

  name                       = "diag-base"
  target_resource_id         = azurerm_log_analytics_workspace.log_analytics_workspace.id
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace.id

  enabled_log {
    category = "Audit"
  }
  enabled_log {
    category = "SummaryLogs"
  }
}

########## Create resources required by Azure Machine Learning Hub
##########

# Create Application Insights instance. This will be shared by the AML Hub and its projects to capture logs and metrics generated by the compute resources
#
resource "azurerm_application_insights" "aml_hub_appins" {
  depends_on = [
    azurerm_log_analytics_workspace.log_analytics_workspace
  ]
  name                = "${local.app_insights_prefix}${var.purpose}${var.location_code}${var.random_string}"
  location            = var.location
  resource_group_name = azurerm_resource_group.rgwork.name
  workspace_id        = azurerm_log_analytics_workspace.log_analytics_workspace.id
  application_type    = "other"
}

# Create storage account which will be used as the default storage account for the AML hub and projects. The storage account will block public access
# and use resource access rules to allow the AML hub and projects. Key-based authentication will be disabled to enforce Entra ID authentication
# and Azure RBAC authorization. Key-based authentication will be disabled to enforce Entra ID authentication and Azure RBAC authorization.
module "storage_account_aml_hub" {

  source              = "../../modules/storage-account"
  purpose             = var.purpose
  random_string       = var.random_string
  location            = var.location
  location_code       = var.location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  # Resource logs for all endpoints the storage account will be sent to this Log Analytics Workspace
  law_resource_id = azurerm_log_analytics_workspace.log_analytics_workspace.id

  # Disable storage access keys
  key_based_authentication = false

  # Block public access and use resource rules to allow the AI Foundry Hub and projects to access the storage account through the Microsoft public backbone 
  # using a managed identity.
  network_access_default = "Deny"
  resource_access = [
    {
      endpoint_resource_id = "/subscriptions/${var.sub_id_dns}/resourcegroups/*/providers/Microsoft.MachineLearningServices/workspaces/*"
    }
  ]
}

# Create Key Vault which will hold secrets for the AML hub and projects. Public access will be disabled with the Trusted Services Exception to allow
# the AI Foundry instance to access the Key Vault for retrieval of secrets.
#
module "keyvault_aml_hub" {
  source              = "../../modules/key-vault"
  random_string       = var.random_string
  location            = var.location
  location_code       = var.location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  purpose             = var.purpose
  tags                = var.tags

  # Resource logs for the Key Vault will be sent to this Log Analytics Workspace
  law_resource_id = azurerm_log_analytics_workspace.log_analytics_workspace.id

  # The user specified here will have the Azure RBAC Key Vault Administrator role over the Azure Key Vault instance
  kv_admin_object_id = var.user_object_id

  # Disable public access and allow the Trusted Azure Service firewall exception
  firewall_default_action = "Deny"
  firewall_bypass         = "AzureServices"
}

# Create an Azure Container Registry instance for use by the AML hub. This instance will be created with public access disabled with the Trusted Services Exception to allow
# AML hub compute instances and serverless endpoints access to the Container Registry for pulling container images.
#
module "container_registry_aml_hub" {
  source              = "../../modules/container-registry"
  purpose             = var.purpose
  random_string       = var.random_string
  location            = var.location
  location_code       = var.location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  # Resource logs for the Container Registry will be sent to this Log Analytics Workspace
  law_resource_id = azurerm_log_analytics_workspace.log_analytics_workspace.id

  # Module has incoming public access disabled by default with trusted Azure Services bypass
  default_network_action = "Deny"
  bypass_network_rules   = "AzureServices"
}

########## Create optional resources to demonstrate capabilities
##########

# Create storage account which will be hold data to be processed by AI foundry. The storage account will block public access 
# and use resource access rules to allow the AI Foundry Hub and projects. Key-based authentication will be disabled to enforce Entra ID authentication 
# and Azure RBAC authorization. Key-based authentication will be disabled to enforce Entra ID authentication and Azure RBAC authorization.
module "storage_account_data" {

  source              = "../../modules/storage-account"
  purpose             = "${var.purpose}data"
  random_string       = var.random_string
  location            = var.location
  location_code       = var.location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  # Resource logs for the storage account will be sent to this Log Analytics Workspace
  law_resource_id = azurerm_log_analytics_workspace.log_analytics_workspace.id

  # Disable storage access keys
  key_based_authentication = false

  # Block public access and use resource rules to allow the AI Foundry Hub and projects (which are just Machine Learning workspaces under the hood) and AI Search instances 
  # to access the storage account through the Microsoft public backbone using a managed identity. AI Search will need to access this storage account if you are using the
  # Skill Sets to pull data.
  network_access_default = "Deny"
  resource_access = [
    {
      endpoint_resource_id = "/subscriptions/${var.sub_id_dns}/resourcegroups/*/providers/Microsoft.MachineLearningServices/workspaces/*"
    },
    {
      endpoint_resource_id = "/subscriptions/${var.sub_id_dns}/resourcegroups/*/providers/Microsoft.Search/searchServices/*"
    }
  ]
}

# Create a blob container in the data storage account
#
resource "azurerm_storage_container" "blob_data" {
  name                  = "data"
  storage_account_id    = module.storage_account_data.id
  container_access_type = "private"
}

########## Create the user-assigned managed identity for the AML Hub and the the necessary role assignments. 
########## This section is only executed if the user specifies that a user-assigned managed identity should be created
########## using the user_assigne_managed_identity variable

# Create the user-assigned managed identity for the AI Foundry hub
#
resource "azurerm_user_assigned_identity" "umi_aml_hub" {
  count = var.managed_identity == "user_assigned" ? 1 : 0

  depends_on = [
    azurerm_resource_group.rgwork,
    azurerm_application_insights.aml_hub_appins,
    module.storage_account_aml_hub,
    module.keyvault_aml_hub
  ]

  name                = "${local.umi_prefix}${var.purpose}${var.location_code}${var.random_string}"
  resource_group_name = azurerm_resource_group.rgwork.name
  location            = var.location

  tags = var.tags
}

# Pause for 10 seconds to allow the managed identity that was created to be replicated
#
resource "time_sleep" "wait_umi_aml_hub_creation" {
  count = var.managed_identity == "user_assigned" ? 1 : 0

  depends_on = [
    azurerm_user_assigned_identity.umi_aml_hub[0]
  ]
  create_duration = "10s"
}

# Assign the managed identity the Azure AI Administrator role on the resource group
# This resource group should contain the Application Insights, Container Registry, Storage Account (default),
# and Key Vault used by the AI Foundry instance being created
resource "azurerm_role_assignment" "umi_aml_hub_rg_aiadministrator" {
  count = var.managed_identity == "user_assigned" ? 1 : 0

  depends_on = [
    time_sleep.wait_umi_aml_hub_creation[0]
  ]

  name                 = uuidv5("dns", "${azurerm_resource_group.rgwork.name}${azurerm_user_assigned_identity.umi_aml_hub[0].name}aiadmin")
  scope                = azurerm_resource_group.rgwork.id
  role_definition_name = "Azure AI Administrator"
  principal_id         = azurerm_user_assigned_identity.umi_aml_hub[0].principal_id
}

# Create Azure RBAC role assignments on the default storage account for the AML Hub user-assigned managed identity 
# to assign Blob Data Contributor and File Data Privileged Contributor roles. This enables the AML Hub identity to create
# the necessary blob containers and file shared required by projects
resource "azurerm_role_assignment" "umi_aml_hub_st_blob_data_contributor" {
  count = var.managed_identity == "user_assigned" ? 1 : 0

  depends_on = [
    azurerm_role_assignment.umi_aml_hub_rg_aiadministrator[0]
  ]

  name                 = uuidv5("dns", "${azurerm_resource_group.rgwork.name}${module.storage_account_aml_hub.name}${azurerm_user_assigned_identity.umi_aml_hub[0].name}blobdata")
  scope                = module.storage_account_aml_hub.id
  role_definition_name = "Storage Blob Data Contributor"
  principal_id         = azurerm_user_assigned_identity.umi_aml_hub[0].principal_id
}

resource "azurerm_role_assignment" "umi_aml_hub_st_file_data_contributor" {
  count = var.managed_identity == "user_assigned" ? 1 : 0

  depends_on = [
    azurerm_role_assignment.umi_aml_hub_st_blob_data_contributor[0]
  ]

  name                 = uuidv5("dns", "${azurerm_resource_group.rgwork.name}${module.storage_account_aml_hub.name}${azurerm_user_assigned_identity.umi_aml_hub[0].name}filedata")
  scope                = module.storage_account_aml_hub.id
  role_definition_name = "Storage File Data Privileged Contributor"
  principal_id         = azurerm_user_assigned_identity.umi_aml_hub[0].principal_id
}

# Create Azure RBAC role assignment on hub central key vault for the AML Hub user-assigned managed identity
# to assign the Key Vault Administrator role. This enabled the AML Hub identity to create and managed secrets in the key vault
# for connections
resource "azurerm_role_assignment" "umi_aml_hub_kv_admin" {
  count = var.managed_identity == "user_assigned" ? 1 : 0

  depends_on = [
    azurerm_role_assignment.umi_aml_hub_st_file_data_contributor[0]
  ]

  name                 = uuidv5("dns", "${azurerm_resource_group.rgwork.name}${module.keyvault_aml_hub.name}${azurerm_user_assigned_identity.umi_aml_hub[0].name}kvadmin")
  scope                = module.keyvault_aml_hub.id
  role_definition_name = "Key Vault Administrator"
  principal_id         = azurerm_user_assigned_identity.umi_aml_hub[0].principal_id
}

# Create Azure RBAC role assignment on the resource group for the AML Hub user-assigned managed identity
# to assign the Azure AI Enterprise Network Connection Approver role. This is required for the hub to create
# the managed private endpoints in the managed virtual network
resource "azurerm_role_assignment" "umi_aml_hub_rg_azure_ai_ent_net_conn_app" {
  count = var.managed_identity == "user_assigned" ? 1 : 0

  depends_on = [
    azurerm_role_assignment.umi_aml_hub_kv_admin[0]
  ]

  name                 = uuidv5("dns", "${azurerm_resource_group.rgwork.name}${azurerm_resource_group.rgwork.name}${azurerm_user_assigned_identity.umi_aml_hub[0].name}entnetconnapp")
  scope                = azurerm_resource_group.rgwork.id
  role_definition_name = "Azure AI Enterprise Network Connection Approver"
  principal_id         = azurerm_user_assigned_identity.umi_aml_hub[0].principal_id
}

# Pause for 120 seconds to allow the role assignments to be replicated
#
resource "time_sleep" "wait_umi_aml_hub_role_assignments" {
  count = var.managed_identity == "user_assigned" ? 1 : 0

  depends_on = [
    azurerm_role_assignment.umi_aml_hub_rg_azure_ai_ent_net_conn_app[0]
  ]
  create_duration = "120s"
}

########## Create the AML Hub and its child resources
##########

# Create the AML Hub. 
# For network controls, the hub will be created with public network access disabled for inbound access and approved outbound only for outbound access
# from compute created with the managed virtual network. The Azure Firewall instance created in the managed virtual network will be the Standard SKU to support
# FQDN-based rules.
# For identity controls, the hub will be configured to use a user-assigned managed identity if specified, otherwise it will use a system-assigned managed identity.
resource "azapi_resource" "aml_hub" {
  depends_on = [
    azurerm_application_insights.aml_hub_appins,
    azurerm_log_analytics_workspace.log_analytics_workspace,
    module.container_registry_aml_hub,
    module.storage_account_aml_hub,
    module.keyvault_aml_hub,
    time_sleep.wait_umi_aml_hub_role_assignments,
    module.storage_account_data
  ]

  type                      = "Microsoft.MachineLearningServices/workspaces@2025-06-01"
  name                      = "${local.aml_hub_name_prefix}${var.location_code}${var.random_string}"
  parent_id                 = azurerm_resource_group.rgwork.id
  location                  = var.location
  schema_validation_enabled = false

  body = {

    # Set the hub to use a user-assigned managed identity if specified, otherwise use a system-assigned managed identity
    identity = var.managed_identity == "user_assigned" ? {
      type = "UserAssigned"
      userAssignedIdentities = {
        "${azurerm_user_assigned_identity.umi_aml_hub[0].id}" = {}
      }
      } : {
      type = "SystemAssigned"
    }

    # Create an AML hub workspace
    kind = "Hub"

    properties = merge(
      {
        friendlyName = "Sample-AML-Hub"
        description  = "This is a sample AML Hub"

        applicationInsights = azurerm_application_insights.aml_hub_appins.id
        keyVault            = module.keyvault_aml_hub.id
        storageAccount      = module.storage_account_aml_hub.id
        containerRegistry   = module.container_registry_aml_hub.id

        publicNetworkAccess = "disabled"
        managedNetwork = {
          isolationMode = "AllowOnlyApprovedOutbound"
          firewallSku   = "Standard"
          outboundRules = {
            # Create the managed private endpoint for the Azure Storage Account blob and file endpoints of the data storage account
            managed_pe_data_blob = {
              type = "PrivateEndpoint"
              destination = {
                serviceResourceId = module.storage_account_data.id
                subresourceTarget = "blob"
              }
            }
            managed_pe_data_file = {
              type = "PrivateEndpoint"
              destination = {
                serviceResourceId = module.storage_account_data.id
                subresourceTarget = "file"
              }
            }

            # Create required fqdn rules to allow compute build in the managed virtual network to download tools and libraries
            #
            AllowPypi = {
              type        = "FQDN"
              destination = "pypi.org"
              category    = "UserDefined"
            }
            AllowPythonHostedWildcard = {
              type        = "FQDN"
              destination = "*.pythonhosted.org"
              category    = "UserDefined"
            }
            AllowAnacondaCom = {
              type        = "FQDN"
              destination = "anaconda.com"
              category    = "UserDefined"
            }
            AllowAnacondaComWildcard = {
              type        = "FQDN"
              destination = "*.anaconda.com"
              category    = "UserDefined"
            }
            AllowAnacondaOrgWildcard = {
              type        = "FQDN"
              destination = "*.anaconda.org"
              category    = "UserDefined"
            }

            # Create fqdn rules to support usage of SSH to compute instances in a managed virtual network from Visual Studio Code
            #
            AllowVsCodeDevWildcard = {
              type        = "FQDN"
              destination = "*.vscode.dev"
              category    = "UserDefined"
            }
            AllowVsCodeBlob = {
              type        = "FQDN"
              destination = "vscode.blob.core.windows.net"
              category    = "UserDefined"
            }
            AllowGalleryCdnWildcard = {
              type        = "FQDN"
              destination = "*.gallerycdn.vsassets.io"
              category    = "UserDefined"
            }
            AllowRawGithub = {
              type        = "FQDN"
              destination = "raw.githubusercontent.com"
              category    = "UserDefined"
            }
            AllowVsCodeUnpkWildcard = {
              type        = "FQDN"
              destination = "*.vscode-unpkg.net"
              category    = "UserDefined"
            }
            AllowVsCodeCndWildcard = {
              type        = "FQDN"
              destination = "*.vscode-cdn.net"
              category    = "UserDefined"
            }
            AllowVsCodeExperimentsWildcard = {
              type        = "FQDN"
              destination = "*.vscodeexperiments.azureedge.net"
              category    = "UserDefined"
            }
            AllowDefaultExpTas = {
              type        = "FQDN"
              destination = "default.exp-tas.com"
              category    = "UserDefined"
            }
            AllowCodeVisualStudio = {
              type        = "FQDN"
              destination = "code.visualstudio.com"
              category    = "UserDefined"
            }
            AllowUpdateCodeVisualStudio = {
              type        = "FQDN"
              destination = "update.code.visualstudio.com"
              category    = "UserDefined"
            }
            AllowVsMsecndNet = {
              type        = "FQDN"
              destination = "*.vo.msecnd.net"
              category    = "UserDefined"
            }
            AllowMarketplaceVisualStudio = {
              type        = "FQDN"
              destination = "marketplace.visualstudio.com"
              category    = "UserDefined"
            }
            AllowVsCodeDownload = {
              type        = "FQDN"
              destination = "vscode.download.prss.microsoft.com"
              category    = "UserDefined"
            }
          }
        }

        # Set the authentication for system datastores to use the managed identity of the hub instead of storing the API keys as secrets in Key Vault
        systemDatastoresAuthMode = "identity"

        # Place the workspace in the resource group created at the beginning of this template
        workspaceHubConfig = {
          defaultWorkspaceResourceGroup = azurerm_resource_group.rgwork.id
        }
      },
      # If a user-assigned managed identity is being used, set the user-assigned managed identity ID
      var.managed_identity == "user_assigned" ? {
        primaryUserAssignedIdentity = azurerm_user_assigned_identity.umi_aml_hub[0].id
      } : {}
    )
    tags = var.tags
  }
  # Ignore updates to these tags on additional Terraform deployments
  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

# Create diagnostic settings to capture resource logs and metrics for AML Hub and place them in the Log Analytics Workspace
#
resource "azurerm_monitor_diagnostic_setting" "aml_hub_diag_base" {
  depends_on = [
    azapi_resource.aml_hub,
    azurerm_log_analytics_workspace.log_analytics_workspace
  ]

  name                       = "diag-base"
  target_resource_id         = azapi_resource.aml_hub.id
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace.id

  enabled_log {
    category = "ComputeInstanceEvent"
  }
}

# Create an AML Hub project workspace
#
resource "azapi_resource" "aml_project" {
  depends_on = [
    azapi_resource.aml_hub
  ]

  type                      = "Microsoft.MachineLearningServices/workspaces@2025-06-01"
  name                      = "${local.aml_project_name_prefix}1${var.location_code}${var.random_string}"
  parent_id                 = azurerm_resource_group.rgwork.id
  location                  = var.location
  schema_validation_enabled = false

  body = {
    identity = {
      type = "SystemAssigned"
    }

    kind = "Project"
    sku = {
      tier = "Basic"
      name = "Basic"
    }

    properties = {
      friendlyName = "Sample-Aml-Project-1"
      description  = "This is sample AML Project 1"

      hubResourceId = azapi_resource.aml_hub.id

      # Do not apply any permissions on the resource group
      allowRoleAssignmentOnRg = false

      # Probably unnecessary due to hub configuration but can't hurt
      systemDatastoresAuthMode = "identity"

      # This it the resource group where the AML Hub has been deployed
      workspaceHubConfig = {
        defaultWorkspaceResourceGroup = azurerm_resource_group.rgwork.id
      }
    }
    tags = var.tags
  }
  # Export system-assigned managed identity principal ID for the project
  response_export_values = [
    "identity.principalId"
  ]

  # Ignore updates to these tags on additional Terraform deployments
  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

# Pause for 10 seconds to allow the project identity to be replicated through Entra ID
#
resource "time_sleep" "wait_project_identities" {
  depends_on = [
    azapi_resource.aml_project
  ]
  create_duration = "10s"
}

# Create a connection from the project workspace to a storage account that will be used to demonstrate data storage
#
resource "azapi_resource" "project_storage_data_datastore" {
  depends_on = [
    azapi_resource.aml_project,
    module.storage_account_data,
    azurerm_storage_container.blob_data
  ]

  type                      = "Microsoft.MachineLearningServices/workspaces/datastores@2025-01-01-preview"
  name                      = substr("conn${module.storage_account_data.name}", 0, 24)
  parent_id                 = azapi_resource.aml_project.id
  schema_validation_enabled = true

  body = {
    properties = {
      description   = "Data storage account for AI Foundry Project"
      datastoreType = "AzureBlob"
      accountName   = module.storage_account_data.name
      endpoint      = "core.windows.net"
      protocol      = "https"
      containerName = "data"

      # Set the authentication to use the user's Entra ID identity
      credentials = {
        credentialsType = "None"
      }
      serviceDataAccessAuthIdentity = "None"

      tags = var.tags
    }
  }
}

########## Create Private Endpoints for AML Hub and required resources
##########

# Create a Private Endpoints AML Hub instance
#
module "private_endpoint_aml_hub" {
  depends_on = [
    azapi_resource.aml_hub
  ]

  source              = "../../modules/private-endpoint"
  random_string       = var.random_string
  location            = var.workload_vnet_location
  location_code       = var.workload_vnet_location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  resource_name    = azapi_resource.aml_hub.name
  resource_id      = azapi_resource.aml_hub.id
  subresource_name = "amlworkspace"

  subnet_id = var.subnet_id
  private_dns_zone_ids = [
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.api.azureml.ms",

    # Done for completion but don't believe records in this are actually used today
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.notebooks.azure.net"
  ]
}

# Create Private Endpoints for default storage account
#
module "private_endpoint_st_aml_hub_blob" {
  depends_on = [
    module.private_endpoint_aml_hub,
    module.storage_account_aml_hub
  ]

  source              = "../../modules/private-endpoint"
  random_string       = var.random_string
  location            = var.workload_vnet_location
  location_code       = var.workload_vnet_location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  resource_name    = module.storage_account_aml_hub.name
  resource_id      = module.storage_account_aml_hub.id
  subresource_name = "blob"

  subnet_id = var.subnet_id
  private_dns_zone_ids = [
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
  ]
}

module "private_endpoint_st_aml_hub_file" {
  depends_on = [
    module.private_endpoint_st_aml_hub_blob,
    module.storage_account_aml_hub
  ]

  source              = "../../modules/private-endpoint"
  random_string       = var.random_string
  location            = var.workload_vnet_location
  location_code       = var.workload_vnet_location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  resource_name    = module.storage_account_aml_hub.name
  resource_id      = module.storage_account_aml_hub.id
  subresource_name = "file"

  subnet_id = var.subnet_id
  private_dns_zone_ids = [
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.file.core.windows.net"
  ]
}

# Create a Private Endpoints for Key Vault
#
module "private_endpoint_kv" {
  depends_on = [
    azapi_resource.aml_hub,
    module.keyvault_aml_hub
  ]

  source              = "../../modules/private-endpoint"
  random_string       = var.random_string
  location            = var.workload_vnet_location
  location_code       = var.workload_vnet_location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  resource_name    = module.keyvault_aml_hub.name
  resource_id      = module.keyvault_aml_hub.id
  subresource_name = "vault"


  subnet_id = var.subnet_id
  private_dns_zone_ids = [
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.vaultcore.azure.net"
  ]
}

# Create a Private Endpoint for Container Registry
#
module "private_endpoint_container_registry" {
  depends_on = [
    azapi_resource.aml_hub,
    module.private_endpoint_kv
  ]

  source              = "../../modules/private-endpoint"
  random_string       = var.random_string
  location            = var.workload_vnet_location
  location_code       = var.workload_vnet_location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  resource_name    = module.container_registry_aml_hub.name
  resource_id      = module.container_registry_aml_hub.id
  subresource_name = "registry"

  subnet_id = var.subnet_id
  private_dns_zone_ids = [
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.azurecr.io"
  ]
}

########## Create Private Endpoints for optional resources
##########

# Create Private Endpoints for storage account that will hold test data. Create all endpoints for the hell of it. Likely only need blob and file.
#
module "private_endpoint_st_data_blob" {
  depends_on = [
    module.private_endpoint_container_registry
  ]

  source              = "../../modules/private-endpoint"
  random_string       = var.random_string
  location            = var.workload_vnet_location
  location_code       = var.workload_vnet_location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  resource_name    = module.storage_account_data.name
  resource_id      = module.storage_account_data.id
  subresource_name = "blob"

  subnet_id = var.subnet_id
  private_dns_zone_ids = [
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
  ]
}

module "private_endpoint_st_data_file" {
  depends_on = [
    module.private_endpoint_st_data_blob
  ]

  source              = "../../modules/private-endpoint"
  random_string       = var.random_string
  location            = var.workload_vnet_location
  location_code       = var.workload_vnet_location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  resource_name    = module.storage_account_data.name
  resource_id      = module.storage_account_data.id
  subresource_name = "file"


  subnet_id = var.subnet_id
  private_dns_zone_ids = [
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.file.core.windows.net"
  ]
}

module "private_endpoint_st_data_table" {
  depends_on = [
    module.private_endpoint_st_data_file
  ]

  source              = "../../modules/private-endpoint"
  random_string       = var.random_string
  location            = var.workload_vnet_location
  location_code       = var.workload_vnet_location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  resource_name    = module.storage_account_data.name
  resource_id      = module.storage_account_data.id
  subresource_name = "table"


  subnet_id = var.subnet_id
  private_dns_zone_ids = [
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.table.core.windows.net"
  ]
}

module "private_endpoint_st_data_queue" {
  depends_on = [
    module.private_endpoint_st_data_table
  ]

  source              = "../../modules/private-endpoint"
  random_string       = var.random_string
  location            = var.workload_vnet_location
  location_code       = var.workload_vnet_location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  resource_name    = module.storage_account_data.name
  resource_id      = module.storage_account_data.id
  subresource_name = "queue"


  subnet_id = var.subnet_id
  private_dns_zone_ids = [
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.queue.core.windows.net"
  ]
}

module "private_endpoint_st_data_dfs" {
  depends_on = [
    module.private_endpoint_st_data_queue
  ]

  source              = "../../modules/private-endpoint"
  random_string       = var.random_string
  location            = var.workload_vnet_location
  location_code       = var.workload_vnet_location_code
  resource_group_name = azurerm_resource_group.rgwork.name
  tags                = var.tags

  resource_name    = module.storage_account_data.name
  resource_id      = module.storage_account_data.id
  subresource_name = "dfs"


  subnet_id = var.subnet_id
  private_dns_zone_ids = [
    "/subscriptions/${var.sub_id_dns}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.core.windows.net"
  ]
}